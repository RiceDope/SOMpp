stages:
  - build-and-test
  - benchmark-completion

variables:
  PYTHONUNBUFFERED: "true"

before_script:
  - git submodule update --init

build_and_test:
  stage: build-and-test
  parallel:
    matrix:
      - MACHINE:
          - yuria
          - yuria2
          - yuria3
        COMPILER:
          - gcc
          - clang
        GC:
          - GENERATIONAL
          - MARK_SWEEP
          - COPYING
        INTEGERS:
          - "-DUSE_TAGGING=true"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=true"
          - "-DUSE_TAGGING=false -DCACHE_INTEGER=false"
  tags: [$MACHINE]
  script:
    - rm -rf cmake-build && mkdir cmake-build
    - if [ "$COMPILER" = "gcc" ];   then export CC=gcc-13;   export CXX=g++-13; fi
    - if [ "$COMPILER" = "clang" ]; then export CC=clang-17; export CXX=clang++-17; fi

    # compose a name for this configuration
    - |+
      export NAME="som-$COMPILER-$GC"
      if [[ $INTEGERS =~ "USE_TAGGING=true" ]]; then
        NAME="$NAME-inttag"
      else
        NAME="$NAME-intbox"
      fi
      if [[ $INTEGERS =~ "CACHE_INTEGER=true" ]]; then
        NAME="$NAME-intcache"
      fi
      NAME=`echo "$NAME" | tr '[:upper:]' '[:lower:]'`

    - cd cmake-build
    - cmake .. $INTEGERS -DGC_TYPE=$GC
    - make
    - ./SOM++ -cp ../Smalltalk ../TestSuite/TestHarness.som
    - ./unittests -cp ../Smalltalk:../TestSuite/BasicInterpreterTests ../Examples/Hello.som
    - mv SOM++ ../$NAME
    - cd ..

    # run the benchmarks
    - rebench --experiment="CI ID $CI_PIPELINE_ID" --branch="$CI_COMMIT_REF_NAME" -c rebench.conf all "e:${NAME}" "m:$MACHINE"
###
# complete_benchmarking:
#   stage: benchmark-completion
#   tags: [benchmarks, infinity]
#   script:
#     - rebench --experiment="CI ID $CI_PIPELINE_ID" --report-completion rebench.conf
