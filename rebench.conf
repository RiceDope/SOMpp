# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'rebench.data'

reporting:
    # Benchmark results will be reported to ReBenchDB
    rebenchdb:
        # this url needs to point to the API endpoint
        db_url: https://rebench.stefan-marr.de/rebenchdb
        repo_url: https://github.com/smarr/SOMpp
        record_all: true # make sure everything is recorded
        project_name: SOMpp

runs:
    max_invocation_time: 60

benchmark_suites:
    macro:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD "-cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody:Examples/Benchmarks/Json:Examples/Benchmarks/GraphSearch Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s "
        iterations: 10
        benchmarks:
            - Richards:     {extra_args:   1, machines: [yuria ]}
            - DeltaBlue:    {extra_args:  50, machines: [yuria2]}
            - NBody:        {extra_args: 500, machines: [yuria3]}
            - JsonSmall:    {extra_args:   1, machines: [yuria ]}
            - GraphSearch:  {extra_args:   4, machines: [yuria2]}
            - PageRank:     {extra_args:  40, machines: [yuria3]}

    micro:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s "
        iterations: 10
        benchmarks:
            - Fannkuch:     {extra_args:  6, machines: [yuria ]}
            - Fibonacci:    {extra_args:  3, machines: [yuria2]}
            - Dispatch:     {extra_args:  2, machines: [yuria3]}
            - Bounce:       {extra_args:  2, machines: [yuria ]}
            - Loop:         {extra_args:  5, machines: [yuria2]}
            - Permute:      {extra_args:  3, machines: [yuria3]}
            - Queens:       {extra_args:  2, machines: [yuria ]}
            - List:         {extra_args:  2, machines: [yuria2]}
            - Recurse:      {extra_args:  3, machines: [yuria3]}
            - Storage:      {extra_args:  1, machines: [yuria ]}
            - Sieve:        {extra_args:  4, machines: [yuria2]}
            - BubbleSort:   {extra_args:  3, machines: [yuria3]}
            - QuickSort:    {extra_args:  1, machines: [yuria ]}
            - Sum:          {extra_args:  2, machines: [yuria2]}
            - Towers:       {extra_args:  2, machines: [yuria3]}
            - TreeSort:     {extra_args:  1, machines: [yuria ]}
            - IntegerLoop:  {extra_args:  2, machines: [yuria2]}
            - FieldLoop:    {extra_args:  1, machines: [yuria3]}
            - WhileLoop:    {extra_args: 10, machines: [yuria ]}
            - Mandelbrot:   {extra_args: 30, machines: [yuria2]}

executors:
    som-gcc-generational-inttag:            {path: ., executable: som-gcc-generational-inttag           }
    som-gcc-generational-intbox:            {path: ., executable: som-gcc-generational-intbox           }
    som-gcc-generational-intbox-intcache:   {path: ., executable: som-gcc-generational-intbox-intcache  }
    som-gcc-mark_sweep-inttag:              {path: ., executable: som-gcc-mark_sweep-inttag             }
    som-gcc-mark_sweep-intbox:              {path: ., executable: som-gcc-mark_sweep-intbox             }
    som-gcc-mark_sweep-intbox-intcache:     {path: ., executable: som-gcc-mark_sweep-intbox-intcache    }
    som-gcc-copying-inttag:                 {path: ., executable: som-gcc-copying-inttag                }
    som-gcc-copying-intbox:                 {path: ., executable: som-gcc-copying-intbox                }
    som-gcc-copying-intbox-intcache:        {path: ., executable: som-gcc-copying-intbox-intcache       }

    som-clang-generational-inttag:          {path: ., executable: som-clang-generational-inttag         }
    som-clang-generational-intbox:          {path: ., executable: som-clang-generational-intbox         }
    som-clang-generational-intbox-intcache: {path: ., executable: som-clang-generational-intbox-intcache}
    som-clang-mark_sweep-inttag:            {path: ., executable: som-clang-mark_sweep-inttag           }
    som-clang-mark_sweep-intbox:            {path: ., executable: som-clang-mark_sweep-intbox           }
    som-clang-mark_sweep-intbox-intcache:   {path: ., executable: som-clang-mark_sweep-intbox-intcache  }
    som-clang-copying-inttag:               {path: ., executable: som-clang-copying-inttag              }
    som-clang-copying-intbox:               {path: ., executable: som-clang-copying-intbox              }
    som-clang-copying-intbox-intcache:      {path: ., executable: som-clang-copying-intbox-intcache     }

# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOM++:
        description: All benchmarks on CSOM
        suites:
            - micro
            - macro
        executions:
            - som-gcc-generational-inttag
            - som-gcc-generational-intbox
            - som-gcc-generational-intbox-intcache
            - som-gcc-mark_sweep-inttag
            - som-gcc-mark_sweep-intbox
            - som-gcc-mark_sweep-intbox-intcache
            - som-gcc-copying-inttag
            - som-gcc-copying-intbox
            - som-gcc-copying-intbox-intcache

            - som-clang-generational-inttag
            - som-clang-generational-intbox
            - som-clang-generational-intbox-intcache
            - som-clang-mark_sweep-inttag
            - som-clang-mark_sweep-intbox
            - som-clang-mark_sweep-intbox-intcache
            - som-clang-copying-inttag
            - som-clang-copying-intbox
            - som-clang-copying-intbox-intcache
